// Написать программу вычисляющую значение сложного арифметического выражения. Для простоты - выражение всегда вычисляемое
import java.util.Stack;

public class Calculator {

    public enum Operator{ADD, SUBTRACT, MULTIPLY, DIVIDE, BLANK}

    public static void main(String[] args){
        String expression = "2-6-7*8/2+5";
        Calculator calc = new Calculator();
        System.out.println(calc.compute(expression));
    }

    public double compute(String sequence){
        Stack<Double> numberStack = new Stack<Double>();
        Stack<Operator> operatorStack = new Stack<Operator>();
        for(int i = 0; i < sequence.length(); i++){
            try{
                int number = parseNumber(sequence, i);
                numberStack.push((double)number);

                i += Integer.toString(number).length();
                if(i >= sequence.length()){
                    break;
                }

                Operator op = parseOperator(sequence, i);
                collapseTop(numberStack, operatorStack, op);
                operatorStack.push(op);
            } catch(NumberFormatException ex){
                return Integer.MIN_VALUE;
            }
        }
        collapseTop(numberStack, operatorStack, Operator.BLANK);
        if(numberStack.size() == 1 && operatorStack.size() == 0){
            return numberStack.pop();
        }
        return 0;
    }

    private void collapseTop(Stack<Double> numberStack, Stack<Operator> operatorStack, Operator futureTop){
        while(numberStack.size() >= 2 && operatorStack.size() >= 1){
            if(priorityOfOperator(futureTop) <= priorityOfOperator(operatorStack.peek())){
                double second = numberStack.pop();
                double first = numberStack.pop();
                Operator op = operatorStack.pop();
                double result = applyOp(first, op, second);
                numberStack.push(result);
            } else{
                break;
            }
        }
    }

    private double applyOp(double left, Operator op, double right){
        switch (op){
            case ADD: return left + right;
            case SUBTRACT: return left - right;
            case MULTIPLY: return left * right;
            case DIVIDE: return left / right;
            default: return right;
        }

    }

    private int priorityOfOperator(Operator op){
        switch (op){
            case ADD: return 1;
            case SUBTRACT: return 1;
            case MULTIPLY: return 2;
            case DIVIDE: return 2;
            case BLANK: return 0;
        }
        return 0;
    }

    private int parseNumber(String sequence, int offset){
        StringBuilder sb = new StringBuilder();
        while(offset < sequence.length() && Character.isDigit(sequence.charAt(offset))){
            sb.append(sequence.charAt(offset));
            offset++;
        }
        return Integer.parseInt(sb.toString());
    }

    private Operator parseOperator(String sequence, int offset){
        if(offset < sequence.length()){
            char op = sequence.charAt(offset);
            switch (op){
                case '+': return Operator.ADD;
                case '-': return Operator.SUBTRACT;
                case '*': return Operator.MULTIPLY;
                case '/': return Operator.DIVIDE;
            }
        }
        return Operator.BLANK;
    }

}



static String opStack[];
static int ptrOp;

static String valStack[];
static int ptrVal;

public static void Init()
{
  opStack=new String[200];
  ptrOp=0;
  valStack=new String[200];
  ptrVal=0;
}

public static int Prty(String o)
{
  int r=-1;
  switch (o)
  {
     case "(":
         r=0;
         break;
     case "+":
     case "-":
         r=1;
         break;
     case "*":
     case "/":
         r=2;
         break;
     case "^":
         r=3; 
  }  
  return r;
}

public static String peekOp()
{
 return opStack[ptrOp-1];
}     

public static boolean isEmptyOp()
{
  return (ptrOp==0);
} 

public static boolean isEmptyVal()
{
  return (ptrVal==0);
} 

public static void pushOp(String op)
{
  opStack[ptrOp++]=op;
} 

public static void pushVal(String v)
{
  valStack[ptrVal++]=v;
} 

public static String popOp()
{
  return opStack[--ptrOp];
}

public static String popVal()
{
  return valStack[--ptrVal];
}

public static void exec()
{
 double a1,a2,r;
 String v1,v2;
 String op;

 v2=popVal();
 v1=popVal();
 op=popOp();
 
 a1=Double.parseDouble(v1);
 a2=Double.parseDouble(v2);

 r=0.0;

 switch (op)
 {
    case "+":
         r=a1+a2;
         break;
    case "-":
         r=a1-a2;
         break;
    case "*":
         r=a1*a2;
         break;
    case "/":
         r=a1/a2;
         break;
    case "^":
         r=Math.pow(a1,a2);
         break;
  }

  v1=Double.toString(r);
  pushVal(v1);
  
}

public static void Calculate(String F)
{
  int i; 
  String curr,top;

  Init();
  parse(F);
         
  for (i=0; i<= ptrL; i++)
  {
      curr=Lex[i];
      switch (curr)
      {  
         case "(":
           pushOp(curr);
           break;
         case "+":
         case "-":
         case "*":
         case "/":
         case "^":
           if (isEmptyOp()) 
           {
              pushOp(curr);
              break;
           }           
           top=peekOp();
           if (Prty(curr) > Prty(top))
           {
              pushOp(curr);
              break;
           }           
           else
           {
              exec();
              pushOp(curr);
              break;
           } 
         case ")":
              while (true)
              {
                 top=peekOp();
                 if (top.equals("("))
                 {
                    top=popOp();
                    break;                         
                 }        
                 exec();                      
              }
              break;                   
         default:
              pushVal(curr);
      }     
   }
   
   while (! isEmptyOp())
   {
      exec();
   }            
   
} 

public static void parse(String Formula)
{
 char s;
 int i;
 String Tmp="";
 Lex=new String[200];
 for (i=0; i<200; i++) Lex[i]=""; 
 ptrL=0; 
 for (i=0; i<Formula.length(); i++)
 {
     s=Formula.charAt(i);
     switch (s)
     {
       case '+':
       case '-':
       case '*':
       case '^':
       case '/':
       case '(':
       case ')':
            if (Tmp.length() > 0)
            {
               Lex[ptrL++]=Tmp;
               Tmp="";
            }
            Lex[ptrL++]=""+s;
            break;
       case ' ':
            break;
       default:
            Tmp=Tmp+s;
     }
  }
  if (Tmp.length() > 0) Lex[ptrL]=Tmp;
}        

public static void main(String [] args)

{
  int i;
  String F="2 * (3 + (4 * 5 + (6 * 7) * 8) - 9) * 10";
  Calculate(F);
  System.out.println(F+"="+popVal());
}

}